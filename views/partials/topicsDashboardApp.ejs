<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.18/vue.min.js"></script>
    
<script>
    var topicsDashboardApp = new Vue({
    el: "#topicsDashboardApp",
    data: {
        topicId: '',
        topic: null,
        comments: null,
        searchState: '',
        searchLoader: false,
        message: '',
        files: [],
        testerName: '',
        replyTo: '',
        replyToData: null
    },
    methods: {

        setTopic: function(id) {
            this.topicId = id
            console.log("set topic ",this.topicId);
            this.fetchTopic
            this.fetchComments
        },

        async submitForm(form) {
            var frmData = new FormData();

            frmData.append('message',this.message)
            console.log(frmData);
            const res = await fetch('/beta/api/v1/add-comment/', {
                method: 'POST',
                headers: { 'Content-Type': 'multipart/form-data' },

                // pass in the information from our form
                body: frmData
            });

        },

        addComment: function() {
            var xmlhttp = new XMLHttpRequest();
            var this_ = this;
            var formData = new FormData()

            xmlhttp.open("POST", "/beta/api/v1/add-comment/", true);
            xmlhttp.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                    if (xmlhttp.status == 200) {
                        var res = JSON.parse(xmlhttp.response)
                        // this_.topic = res.results

                        

                    } else if (xmlhttp.status == 400) {
                        this_.searchState = "Sorry, There was an error 400."
                    }
                    else {
                        this_.searchState = "Sorry, Something went wrong."
                    }

                    this_.searchLoader = false;

                } else {
                    this_.searchLoader = true;
                }
            };

            // var params = [
            //     'message='+this.message,
            //     'testerName='+this.testerName,
            //     'topicId='+this.topicId
            // ]
            // var formData = new FormData();
            formData.append("file", this.files);
            formData.append("message", this.message);
            formData.append("testerName", this.testerName);
            formData.append("replyTo", this.replyTo);
            formData.append("topicId", this.topicId);

            
            
            xmlhttp.send(formData);

            this.message = ''
            this.files = []
            this.replyTo = ''
            this.replyToData = null
            // this.fetchComments
            this.updateComments()
        },
        updateComments: function() {

            var xmlhttp = new XMLHttpRequest();
            // console.log('fetching comments.....');
            var this_ = this;
            this_.searchLoader = true;
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                    if (xmlhttp.status == 200) {
                        var res = JSON.parse(xmlhttp.response)
                        this_.comments = res.results
                    } else if (xmlhttp.status == 400) {
                        this_.searchState = "Sorry, There was an error 400."
                    }
                    else {
                        this_.searchState = "Sorry, Something went wrong."
                    }

                    this_.searchLoader = false;

                } else {
                    this_.searchLoader = true;
                }
            };

            if(this.topicId) {
                // console.log('fetching comments');
                xmlhttp.open("GET", "/beta/api/v1/comments/"+this.topicId, true);
                xmlhttp.send();
            } else {
                this.comments = null
            }

        },

        dateFormat: function(dateCreated) {
            // console.log(dateCreated)
            return moment(dateCreated).format('MMMM Do YYYY, h:mm:ss')
        },

        getFiles: function(e){
            this.files = e.target.files || e.dataTransfer.files;
            if(this.files.length > 0) {

                this.files.forEach(previewFile)
            }
            // console.log(this.files);
        },

        removeFile: function(key) {
            console.log(key)
            this.files.splice(key, 1)
        },

        imageClick: function(fileName) {
            var modal = document.getElementById("imageModal")
            var modalImg = document.getElementById("img01");

            modalImg.src = "/uploads/comments/"+fileName;
            modal.style.display = "block";
        },

        closeImageModal: function() {
            var modal = document.getElementById("imageModal")

            modal.style.display = "none";
        },

        setReply: function(replyId) {
            this.replyTo = replyId

            this.fetchReplyTo()

            console.log(this.replyToData);
        },

        fetchReplyTo: async function() {

            let this_ = this
            fetch('/beta/api/v1/find-comment/'+this.replyTo).then(function (response) {
                // The API call was successful!
                return response.json();
            }).then(function (data) {
                // This is the JSON from our response
                console.log(data);
                this_.replyToData = data.results
            }).catch(function (err) {
                // There was an error
                console.warn('Something went wrong.', err);
            });
           
        },

        removeReply: function() {
            this.replyToData = null
            this.replyTo = ''
        }


    },
    
    computed: {

        fetchTopic: function() {

            var xmlhttp = new XMLHttpRequest();

            var this_ = this;
            this_.searchLoader = true;
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                    if (xmlhttp.status == 200) {
                        var res = JSON.parse(xmlhttp.response)
                        this_.topic = res.results
                    } else if (xmlhttp.status == 400) {
                        this_.searchState = "Sorry, There was an error 400."
                    }
                    else {
                        this_.searchState = "Sorry, Something went wrong."
                    }

                    this_.searchLoader = false;

                } else {
                    this_.searchLoader = true;
                }
            };

            if(this.topicId) {
                // console.log('fetching topic');
                xmlhttp.open("GET", "/beta/api/v1/topics/"+this.topicId, true);
                xmlhttp.send();
            } else {
                this.topic = null
            }

            return []
        },

        fetchComments: function() {

            var xmlhttp = new XMLHttpRequest();
            // console.log('fetching comments.....');
            var this_ = this;
            this_.searchLoader = true;
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                    if (xmlhttp.status == 200) {
                        var res = JSON.parse(xmlhttp.response)
                        this_.comments = res.results
                    } else if (xmlhttp.status == 400) {
                        this_.searchState = "Sorry, There was an error 400."
                    }
                    else {
                        this_.searchState = "Sorry, Something went wrong."
                    }

                    this_.searchLoader = false;

                } else {
                    this_.searchLoader = true;
                }
            };

            if(this.topicId) {
                // console.log('fetching comments');
                xmlhttp.open("GET", "/beta/api/v1/comments/"+this.topicId, true);
                xmlhttp.send();
            } else {
                this.comments = null
            }

            return []
        },

        previewImages: function(){
            this.files.forEach(previewFile)
        },

        
        

    }

    })

    topicsDashboardApp.setTopic("<%= selectedTopic %>")
    // set initial topic id
    if (!topicsDashboardApp.topicId && topicsDashboardApp.topics && topicsDashboardApp.topics[0].sub) {
        topicsDashboardApp.setTopic(topicsDashboardApp.topics[0].sub[0]._id)
    }

    // script to fetch comments interval 5sec
    var interval = setInterval(function(){
        if (topicsDashboardApp.topicId) {
            topicsDashboardApp.updateComments();
        }
    }, 5000);

    // test drag and drop functions
    // ************************ Drag and drop ***************** //
    let dropArea = document.getElementById("drop-area");

    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false)   
        document.body.addEventListener(eventName, preventDefaults, false)
    });

    // // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false)
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false)
    });

    // // Handle dropped files
    dropArea.addEventListener('drop', handleDrop, false);

    function preventDefaults (e) {
        e.preventDefault()
        e.stopPropagation()
    }

    function highlight(e) {
        dropArea.classList.add('highlight')
    }

    function unhighlight(e) {
        dropArea.classList.remove('active')
    }

    function handleDrop(e) {
        var dt = e.dataTransfer
        var files = dt.files

        handleFiles(files)
    }

    let uploadProgress = []
    let progressBar = document.getElementById('progress-bar')

    function initializeProgress(numFiles) {
        progressBar.value = 0
        uploadProgress = []

        for(let i = numFiles; i > 0; i--) {
            uploadProgress.push(0)
        }
    }

    function updateProgress(fileNumber, percent) {
        uploadProgress[fileNumber] = percent
        let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length
        progressBar.value = total
    }

    function handleFiles(files) {

        files = [...files]
        initializeProgress(files.length)
        files.forEach(uploadFile)

    }

    function previewFile(file) {
        let reader = new FileReader()
        reader.readAsDataURL(file)
        reader.onloadend = function() {
            let img = document.createElement('img')
            img.src = reader.result
            document.getElementById('gallery').appendChild(img)
        }
    }

    function uploadFile(file, i) {
        var url = '/beta/api/v1/add-comment/upload-image'
        var xhr = new XMLHttpRequest()
        var formData = new FormData()
        xhr.open('POST', url, true)
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')

        // Update progress (can be used to show progress indicator)
        xhr.upload.addEventListener("progress", function(e) {
            updateProgress(i, (e.loaded * 100.0 / e.total) || 100)
        })

        xhr.addEventListener('readystatechange', function(e) {
            if (xhr.readyState == 4 && xhr.status == 200) {
            updateProgress(i, 100) 
            var res = JSON.parse(xhr.response)
   
                if (res.results) {
                    topicsDashboardApp.files.push(res.results)
                }
            }
            else if (xhr.readyState == 4 && xhr.status != 200) {
            // Error. Inform the user
            }
        })
        formData.append('file', file)
        xhr.send(formData)
    }


</script>