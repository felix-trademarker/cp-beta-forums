<script src="https://cdn.bootcss.com/vue/2.2.6/vue.js"></script>
<script src="/beta/javascripts/vue-html5-editor.js"></script>
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.18/vue.min.js"></script> -->
<script>
    Vue.use(VueHtml5Editor, {
        hiddenModules: [
            "image"
        ],
        visibleModules: [
            "info",
            "text",
            "color",
            "font",
            "align",
            "tabulation",
            "hr",
            "list",
            "link",
            "unlink",
            "full-screen",
            "image"//will not show in editor
        ]
    })

    var topicsDashboardApp = new Vue({
    el: "#topicsDashboardApp",
    data: {
        topicId: '',
        topic: null,
        comments: null,
        searchState: '',
        searchLoader: false,
        message: "",
        files: [],
        testerName: '',
        testerAvatar: '',
        replyTo: '',
        replyToData: null,
        vuex: {},
        userData: {},
        topics: {},
        editComment: {},
        content: "",
        showModuleName: false,
    },
    methods: {
        updateData: function (data) {
            this.content = data
        },
        updateDataEdit: function (data) {
            this.editComment.message = data
        },
        setTopic: function(id) {
            this.topicId = id+''
            console.log("set topic ",this.topicId);
            this.fetchTopic
            this.fetchComments
        },

        async submitForm(form) {
            var frmData = new FormData();

            frmData.append('message',this.message)
            console.log(frmData);
            const res = await fetch('/beta/api/v1/add-comment/', {
                method: 'POST',
                headers: { 'Content-Type': 'multipart/form-data' },

                // pass in the information from our form
                body: frmData
            });

        },

        addComment: function() {
            var xmlhttp = new XMLHttpRequest();
            var this_ = this;
            var formData = new FormData()

            xmlhttp.open("POST", "/beta/api/v1/add-comment/", true);
            xmlhttp.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                    if (xmlhttp.status == 200) {
                        var res = JSON.parse(xmlhttp.response)
                        // this_.topic = res.results

                        

                    } else if (xmlhttp.status == 400) {
                        this_.searchState = "Sorry, There was an error 400."
                    }
                    else {
                        this_.searchState = "Sorry, Something went wrong."
                    }

                    this_.searchLoader = false;

                } else {
                    this_.searchLoader = true;
                }
            };

            // var params = [
            //     'message='+this.message,
            //     'testerName='+this.testerName,
            //     'topicId='+this.topicId
            // ]
            // var formData = new FormData();
            formData.append("file", this.files);
            formData.append("message", this.content);
            formData.append("testerName", this.testerName);
            formData.append("testerAvatar", this.testerAvatar);
            formData.append("replyTo", this.replyTo);
            formData.append("topicId", this.topicId);

            
            
            xmlhttp.send(formData);

            this.message = ''
            this.files = []
            this.replyTo = ''
            this.replyToData = null
            // this.fetchComments
            this.updateComments()
        },
        updateComments: function() {

            var xmlhttp = new XMLHttpRequest();
            // console.log('fetching comments.....');
            var this_ = this;
            this_.searchLoader = true;
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                    if (xmlhttp.status == 200) {
                        var res = JSON.parse(xmlhttp.response)
                        this_.comments = res.results
                    } else if (xmlhttp.status == 400) {
                        this_.searchState = "Sorry, There was an error 400."
                    }
                    else {
                        this_.searchState = "Sorry, Something went wrong."
                    }

                    this_.searchLoader = false;

                } else {
                    this_.searchLoader = true;
                }
            };

            if(this.topicId) {
                // console.log('fetching comments');
                xmlhttp.open("GET", "/beta/api/v1/comments/"+this.topicId, true);
                xmlhttp.send();
            } else {
                this.comments = null
            }

        },

        dateFormat: function(dateCreated) {
            // console.log(dateCreated)
            return moment(dateCreated).format('MMMM Do YYYY, h:mm:ss')
        },

        getFiles: function(e){
            this.files = e.target.files || e.dataTransfer.files;
            if(this.files.length > 0) {

                this.files.forEach(previewFile)
            }
            // console.log(this.files);
        },

        removeFile: function(key) {
            console.log(key)
            this.files.splice(key, 1)
        },

        imageClick: function(fileName) {
            var modal = document.getElementById("imageModal")
            var modalImg = document.getElementById("img01");

            modalImg.src = "/beta/uploads/comments/"+fileName;
            modal.style.display = "block";
        },

        closeImageModal: function() {
            var modal = document.getElementById("imageModal")

            modal.style.display = "none";
        },

        commentEdit: function(comment) {
            var modal = document.getElementById("editCommentModal")
            this.editComment = comment
            modal.style.display = "block";
        },

        closeCommentEdit: function() {
            var modal = document.getElementById("editCommentModal")

            modal.style.display = "none";
        },

        setReply: function(replyId) {
            this.replyTo = replyId

            this.fetchReplyTo()

            console.log(this.replyToData);
        },

        fetchReplyTo: async function() {

            let this_ = this
            fetch('/beta/api/v1/find-comment/'+this.replyTo).then(function (response) {
                // The API call was successful!
                return response.json();
            }).then(function (data) {
                // This is the JSON from our response
                console.log(data);
                this_.replyToData = data.results
            }).catch(function (err) {
                // There was an error
                console.warn('Something went wrong.', err);
            });
           
        },

        removeReply: function() {
            this.replyToData = null
            this.replyTo = ''
        },

        updateComment: function() {
            let this_ = this
            
            let updateData = {
                commentId: this.editComment._id,
                comment: this.editComment.message
            }
            postData('/beta/api/v1/update-comment/', updateData)
                .then(data => {
                    console.log(data)
                    // this_.this.updateComments()
                    this_.closeCommentEdit()
            });
        },

        deleteComment: function(comment) {
            let this_ = this
            
            let text = "Are you sure?"
            if (confirm(text) == true) {

                let deleteData = {
                    commentId: comment._id,
                }

                postData('/beta/api/v1/delete-comment/', deleteData)
                    .then(data => {
                        console.log(data)
                        this_.this.updateComments()
                });
            } 
        }


    },
    
    computed: {

        fetchTopic: function() {

            var xmlhttp = new XMLHttpRequest();

            var this_ = this;
            this_.searchLoader = true;
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                    if (xmlhttp.status == 200) {
                        var res = JSON.parse(xmlhttp.response)
                        this_.topic = res.results
                    } else if (xmlhttp.status == 400) {
                        this_.searchState = "Sorry, There was an error 400."
                    }
                    else {
                        this_.searchState = "Sorry, Something went wrong."
                    }

                    this_.searchLoader = false;

                } else {
                    this_.searchLoader = true;
                }
            };

            if(this.topicId) {
                console.log('fetching topic');
                xmlhttp.open("GET", "/beta/api/v1/topics/"+this.topicId, true);
                xmlhttp.send();
            } else {
                this.topic = null
            }

            return []
        },

        fetchComments: function() {

            var xmlhttp = new XMLHttpRequest();
            // console.log('fetching comments.....');
            var this_ = this;
            this_.searchLoader = true;
            xmlhttp.onreadystatechange = function() {
                if (xmlhttp.readyState == XMLHttpRequest.DONE) {   // XMLHttpRequest.DONE == 4
                    if (xmlhttp.status == 200) {
                        var res = JSON.parse(xmlhttp.response)
                        this_.comments = res.results
                    } else if (xmlhttp.status == 400) {
                        this_.searchState = "Sorry, There was an error 400."
                    }
                    else {
                        this_.searchState = "Sorry, Something went wrong."
                    }

                    this_.searchLoader = false;

                } else {
                    this_.searchLoader = true;
                }
            };

            if(this.topicId) {
                // console.log('fetching comments');
                xmlhttp.open("GET", "/beta/api/v1/comments/"+this.topicId, true);
                xmlhttp.send();
            } else {
                this.comments = null
            }

            return []
        },

        previewImages: function(){
            this.files.forEach(previewFile)
        },

        
    }

    })

    var vuex = JSON.parse(window.localStorage.getItem('vuex'))
    topicsDashboardApp.vuex = vuex

    var commentForm = document.getElementById("commentForm");
    let uploadProgress = []
    let progressBar = document.getElementById('progress-bar')

    // console.log("topics", topicsDashboardApp.topics); 


    if (commentForm) {

        topicsDashboardApp.setTopic("<%= typeof selectedTopic !== 'undefined' ? selectedTopic : '' %>")

        // console.log(topicsDashboardApp.userData);
        // set initial topic id
        if (!topicsDashboardApp.topicId && topicsDashboardApp.topics && topicsDashboardApp.topics[0].sub) {
            topicsDashboardApp.setTopic(topicsDashboardApp.topics[0].sub[0]._id)
        }

        // script to fetch comments interval 5sec
        // var interval = setInterval(function(){
        //     if (topicsDashboardApp.topicId) {
        //         topicsDashboardApp.updateComments();
        //     }
        // }, 5000);

        // test drag and drop functions
        // ************************ Drag and drop ***************** //
        let dropArea = document.getElementById("drop-area");

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false)   
            document.body.addEventListener(eventName, preventDefaults, false)
        });

        // // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false)
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false)
        });

        // // Handle dropped files
        dropArea.addEventListener('drop', handleDrop, false);

        function preventDefaults (e) {
            e.preventDefault()
            e.stopPropagation()
        }

        function highlight(e) {
            dropArea.classList.add('highlight')
        }

        function unhighlight(e) {
            dropArea.classList.remove('active')
        }

        function handleDrop(e) {
            var dt = e.dataTransfer
            var files = dt.files

            handleFiles(files)
        }

        

        function initializeProgress(numFiles) {
            progressBar.value = 0
            uploadProgress = []

            for(let i = numFiles; i > 0; i--) {
                uploadProgress.push(0)
            }
        }

        function updateProgress(fileNumber, percent) {
            uploadProgress[fileNumber] = percent
            let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length
            progressBar.value = total
        }

        function handleFiles(files) {

            files = [...files]
            initializeProgress(files.length)
            files.forEach(uploadFile)

        }

        function previewFile(file) {
            let reader = new FileReader()
            reader.readAsDataURL(file)
            reader.onloadend = function() {
                let img = document.createElement('img')
                img.src = reader.result
                document.getElementById('gallery').appendChild(img)
            }
        }

        function uploadFile(file, i) {
            var url = '/beta/api/v1/add-comment/upload-image'
            var xhr = new XMLHttpRequest()
            var formData = new FormData()
            xhr.open('POST', url, true)
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')

            // Update progress (can be used to show progress indicator)
            xhr.upload.addEventListener("progress", function(e) {
                console.log("upload progress...", (e.loaded * 100.0 / e.total));
                updateProgress(i, (e.loaded * 100.0 / e.total) || 100)
            })

            xhr.addEventListener('readystatechange', function(e) {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    console.log("progress... complete");
                updateProgress(i, 100) 
                var res = JSON.parse(xhr.response)
    
                    if (res.results) {
                        topicsDashboardApp.files.push(res.results)
                    }
                }
                else if (xhr.readyState == 4 && xhr.status != 200) {
                // Error. Inform the user
                }
            })
            formData.append('file', file)
            xhr.send(formData)
        }


    }

    fetch('/beta/api/v1/topics').then(function (response) {
        // The API call was successful!
        return response.json();
    }).then(function (data) {

        topicsDashboardApp.topics = data
        console.log("topics",data);
    }).catch(function (err) {
        // There was an error
        console.warn('Something went wrong.', err);
    });

    postData('/beta/api/v1/check-auth/', { userId: vuex.userStats.userId, email: vuex.userInfo.email, token: vuex.token })
        .then(data => {
            topicsDashboardApp.userData = data
    });

    // CHECK EVERY 10 SEC FOR USERS DATA
    // var interval = setInterval(function(){
    //     // FETCH NEW VUEX
    //     vuex = JSON.parse(window.localStorage.getItem('vuex'))
    //     topicsDashboardApp.vuex = vuex
    //     // CALL AJAX TO CHECK USERSDATA
    //     postData('/beta/api/v1/check-auth/', { userId: vuex.userStats.userId, email: vuex.userInfo.email, token: vuex.token })
    //     .then(data => {
    //         topicsDashboardApp.userData = data
    //     });

    // }, 10000);

    async function postData(url = '', data = {}) {

        const response = await fetch(url, {
            method: 'POST',
            mode: 'cors', 
            cache: 'no-cache', 
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json'
                // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            redirect: 'follow',
            referrerPolicy: 'no-referrer',
            body: JSON.stringify(data) 
        });

        return response.json();
    }

    let btnDeleteTopic = document.getElementById("btnDeleteTopic");

    if (btnDeleteTopic) {
        btnDeleteTopic.addEventListener('click', deleteTopic, false)
    }

    function deleteTopic(e) {
        

        let text = "Are you sure?"
        if (confirm(text) != true) {
            e.preventDefault()
            e.stopPropagation()
        }

        // return false;
    }

</script>