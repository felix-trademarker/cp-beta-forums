<script src="https://cdn.bootcss.com/vue/2.2.6/vue.js"></script>
<script src="/beta/javascripts/pinyin-convert.js" ></script>
<script src="/beta/javascripts/date.format.js" ></script>

<script>

    var lessonDashboardApp = new Vue({
        el: "#lessonDashboardApp",
        data: {
            vuex: JSON.parse(window.localStorage.getItem('vuex')),
            searchString: "",
            searchType: [],
            lessons: {},
            page: 1,
            offset: 0,
            decks: {},
            deckTags: [],
            deckAction: 'add',
            deckSelectedId: '',
            deckWordId: []

        },
        methods: {

            getAPIFetch: async function(api) {

                let results = await fetch(api,{
                    credentials: 'same-origin',
                    headers: {
                        'Accept': 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer '+ (this.vuex ? this.vuex.token : '')
                    },
                })
                .then(resp => resp.json())
                .then(res => {
                    // console.log("this res", res);
                    return res;
                })

                return results;

            },

            postAPIFetch: async function(api, params) {

                let options = {
                    credentials: 'same-origin',
                    headers: {
                        'Accept': 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer '+ (this.vuex ? this.vuex.token : '')
                    },
                    method: "POST",
                    body: JSON.stringify(params)
                }

                let okOption = false

                let results = await fetch(api,options)

                    .then(res => {
                        return res.statusText;
                    })


                if (okOption) {
                    return {status:"ok"}
                } else {
                    return results;
                }

            },

            putAPI: async function(api, params) {

                let options = {
                    credentials: 'same-origin',
                    headers: {
                        'Accept': 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer '+ (this.vuex ? this.vuex.token : '')
                    },
                    method: "PUT",
                    body: JSON.stringify(params)
                }

                let okOption = false

                let results = await fetch(api,options)
                    .then(res => res.json() )
                    .then(resp => {
                    console.log("resp", resp);

                        return resp;
                    })

                    console.log("results", results);

                return results;

            },

            deleteAPI: async function(api) {

                let options = {
                    credentials: 'same-origin',
                    headers: {
                        'Accept': 'application/json, text/plain, */*',
                        'Authorization': 'Bearer '+ (this.vuex ? this.vuex.token : '')
                    },
                    method: "DELETE",
                }

                let results = await fetch(api,options)
                    // .then(resp => resp.json())
                    .then(res => {
                        return res.statusText;
                })

                return results;

            },

            deleteVocabularyTag: async function(id) {
                let resp = await this.deleteAPI("https://www.chinesepod.com/api/v1/vocabulary/words/"+id,'')

                this.showMessage('Vocabulary Deleted!', 'success')

                this.fetchLessons
            },

            searchQuery: function(){

                let queryString = ""
                let queryStringType = ""

                if (this.searchString) 
                queryString = "search="+this.searchString
                
                queryStringType = this.searchType.join("&")

                if (queryStringType) 
                queryString += "&" + queryStringType
                
                if(queryString)
                window.location.href = "/explore?"+queryString
                
            },

            studyCompleted: async function(ndx) {

                this.lessons.lessons[ndx].studied = this.lessons.lessons[ndx].studied ? 0 : 1;
                let params = {
                    lessonId: this.lessons.lessons[ndx].id,
                    status: this.lessons.lessons[ndx].studied
                }

                // this.lesson.studied = this.lesson.studied > 0 ? 0 : 1;

                let toogleSave = await this.postAPIFetch("/api/v1/dashboard/toggle-studied", params)

                this.showMessage('Settings Saved!', 'success')
            },

            saveLesson: async function(ndx) {

                this.lessons.lessons[ndx].saved = this.lessons.lessons[ndx].saved ? 0 : 1;
                let params = {
                    lessonId: this.lessons.lessons[ndx].id,
                    status: this.lessons.lessons[ndx].saved
                }

                // this.lesson.saved = !this.lesson.saved

                let toogleSave = await this.postAPIFetch("/api/v1/dashboard/toggle-saved", params)

                this.showMessage('Lesson Saved!', 'success')
            },

            loadMore: async function() {

                this.offset = this.page * 16
                this.page++

                let tempLessons = await this.getAPIFetch('/api/v1/vocabulary/words?limit=16&skip='+this.offset);

                if (tempLessons && tempLessons.vocabulary){
                    this.lessons.vocabulary.push(...tempLessons.vocabulary)
                }
            },


            showMessage: function(message, action) {
                console.log("show message", message, action);
                document.getElementById("messageContainer").innerHTML = `<div class="text-center alert alert-${action}" role="alert">
                                            ${message}
                                        </div>`
                

                setTimeout(function(){
                    document.getElementById("messageContainer").innerHTML = ""
                },3000);
            },

            pinyinConvert: function(pinyin) {
                return PinyinConverter.convert(pinyin);
            },

            playAudio : function (id) {
                let play_audio = document.getElementById(id);
                // console.log(play_audio);
                play_audio.play();
            },

            copyClipboard: function(copyData) {
                navigator.clipboard.writeText(copyData);

                this.showMessage("Copied to clipboard!", "success")
            },

            formatDate: function(strDate) {
                return dateFormat(strDate, "mmmm d yyyy")
            },

            showHanzi: function(id, animateClass, hanzi) {

                console.log(id, animateClass, hanzi);
                
             
                // wait to load container
                setTimeout(function(){
                    let hanziContainer = document.getElementById(id);
                    let loader = hanziContainer.querySelector('.loader')

                    if(loader)
                    loader.remove()

                    if( hanziContainer ) {
                        let writert = HanziWriter.create(id, hanzi, {
                            width: 100,
                            height: 100,
                            renderer: 'svg',
                            radicalColor: '#166E16',
                            onCorrectStroke: printStrokePoints,
                            onMistake: printStrokePoints,
                            showCharacter: false,
                        });

                        document.querySelector('.'+animateClass).addEventListener('click', function () {
                            writert.animateCharacter();
                        });
                    }
                },500);
                
            },

            setParams: function(wordId, action, tags) {
                this.deckWordId.push(wordId)
                this.deckAction = action
                this.deckTags = tags
            },

            unSetParams: function(){
                this.deckWordId = []
                this.deckAction = ''
                this.deckTags = []
            },

            deckActionSubmit: async function() {

                let params = {
                    deckId : this.deckSelectedId,
                    wordId : this.deckWordId
                }
                if ( this.deckAction == 'add' ) {
                    await this.putAPI("/api/v1/vocabulary/decks/add", params)
                } else {
                    await this.postAPIFetch("/api/v1/vocabulary/decks/remove", params)
                }

                await this.fetchLessons

                this.showMessage('Vocabulary Updated!', 'success')
            }
            
        },
        computed: {
            fetchLessons: async function(){
                this.lessons = await this.getAPIFetch('/api/v1/vocabulary/words?limit=16&skip=0');
                this.decks = await this.getAPIFetch('/api/v1/vocabulary/decks');
                // this.lessons = {
                //                 "total":50,
                //                 "vocabulary":[
                //                     {
                //                         "id":15306949,
                //                         "vocabulary_class":"Key Vocabulary",
                //                         "s":"高",
                //                         "p":"gāo","en":"tall","t":"高","audio":"mp3/glossary/source/chinesepod_4360_vocabulary_53919_prototype_21127_24910.mp3","display_order":9,"image":"","progress":0,"next_test_date":"2022-05-23T06:05:12.000Z","last_test_date":"2022-05-23T06:05:12.000Z","times_tested":0,"number_correct":0,"char_learned":0,"user_vocabulary_id":19308931,"createdAt":"2022-05-23T08:07:40.000Z","lesson":{"title":"Getting Taller (Not Fatter)","hash_code":"0346f22bfb053ac6a8580bb1b9e78dd96cb18e47","slug":"getting-taller-not-fatter","level":"Pre Intermediate","type":"lesson","id":"1327"},"tags":[],"audioUrlCN":"https://s3contents.chinesepod.com/1327/0346f22bfb053ac6a8580bb1b9e78dd96cb18e47/mp3/glossary/source/chinesepod_4360_vocabulary_53919_prototype_21127_24910.mp3"},
                                    
                // ]}

                // this.decks = [{"id":169159,"tag":"Asking Height and Weight 7","public":0,"user_id":1197231,"count":0,"forReview":0},{"id":169158,"tag":"Asking Height and Weight 5","public":0,"user_id":1197231,"count":0,"forReview":0},{"id":169157,"tag":"Asking Height and Weight 4","public":0,"user_id":1197231,"count":1,"forReview":1},{"id":169156,"tag":"Asking Height and Weight 3","public":0,"user_id":1197231,"count":0,"forReview":0},{"id":169155,"tag":"Asking Height and Weight 3","public":0,"user_id":1197231,"count":0,"forReview":0},{"id":169153,"tag":"Asking Height and Weight 2","public":0,"user_id":1197231,"count":0,"forReview":0},{"id":169152,"tag":"Asking Height and Weight","public":0,"user_id":1197231,"count":0,"forReview":0},{"id":167572,"tag":"Uncategorized","public":0,"user_id":1197231,"count":20,"forReview":20}]

            }

            

        }

    });

    lessonDashboardApp.fetchLessons

    function printStrokePoints(data) {
        var pointStrs = data.drawnPath.points.map((point) => `{x: ${point.x}, y: ${point.y}}`);
        console.log(`[${pointStrs.join(', ')}]`);
    }



</script>